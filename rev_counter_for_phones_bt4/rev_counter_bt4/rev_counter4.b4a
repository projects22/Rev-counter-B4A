Build1=Default,anywheresoftware.b4a.samples.bluetooth
File1=1.bal
File2=button-gry.png
File3=meter2.png
File4=point2.png
FileGroup1=Default Group
FileGroup2=Default Group
FileGroup3=Default Group
FileGroup4=Default Group
Group=Default Group
Library1=core
Library2=randomaccessfile
Library3=serial
Library4=runtimepermissions
Library5=byteconverter
ManifestCode='This code will be applied to the manifest file during compilation.~\n~'You do not need to modify it in most cases.~\n~'See this link for for more information: https://www.b4x.com/forum/showthread.php?p=78136~\n~AddManifestText(~\n~<uses-sdk android:minSdkVersion="5" android:targetSdkVersion="26"/>~\n~<supports-screens android:largeScreens="true" ~\n~    android:normalScreens="true" ~\n~    android:smallScreens="true" ~\n~    android:anyDensity="true"/>)~\n~SetApplicationAttribute(android:icon, "@drawable/icon")~\n~SetApplicationAttribute(android:label, "$LABEL$")~\n~CreateResourceFromFile(Macro, Themes.LightTheme)~\n~'End of default text.~\n~
Module1=BluetoothManager
NumberOfFiles=4
NumberOfLibraries=5
NumberOfModules=1
Version=10.2
@EndOfDesignText@
#Region Module Attributes
	#FullScreen: False
	#IncludeTitle: True
	#ApplicationLabel: Rev_counter3
	#VersionCode: 1
	#VersionName: 
	#SupportedOrientations: portrait
	#CanInstallToExternalStorage: False
	#BridgeLogger: true
#End Region

Sub Process_Globals
	Private rp As RuntimePermissions
	Public Manager As BluetoothManager
End Sub

Sub Globals
	Private btnSearchForDevices As Button
	Private btnAllowConnection As Button
	
	Private cvsGraph As Canvas	', cvsGraph2
	Private pnl1 As Panel		', pnl2
	Private img1 As ImageView
	Private rect1 As Rect
	Private text1 As EditText
	Private Label1 As Label
	Private bc As ByteConverter
	Private bmppointer As Bitmap
	Private reply As String
	Private run=False As Boolean
	Private Label2 As Label
	Private Label3 As Label
	Private btnTest As Button
	Private btnRPM As Button
End Sub


Sub Activity_Create(FirstTime As Boolean)
	Activity.LoadLayout("1")
	Manager.Initialize
	bmppointer.Initialize(File.DirAssets,"meter2.png")
	bmppointer.Initialize(File.DirAssets,"point2.png")
	cvsGraph.Initialize(pnl1)	' initialize the Canvas for the panel
	pnl1.Left=50%x-150dip
	img1.Left=50%x-150dip
	rect1.Initialize(0, 0, 300dip, 300dip)
	cvsGraph.DrawBitmap(bmppointer, Null, rect1)
	cvsGraph.DrawText("3000",150,245dip,Typeface.DEFAULT,36,Colors.Green,"CENTER")
	pnl1.Invalidate
End Sub

Sub Activity_Resume
	UpdateState
End Sub

Public Sub UpdateState
	btnSearchForDevices.Enabled = Manager.BluetoothState
	btnAllowConnection.Enabled = Manager.BluetoothState
	btnRPM.Enabled = Manager.ConnectionState
	btnTest.Enabled = Manager.ConnectionState
	Label3.Visible = Manager.ConnectionState
End Sub

Sub btnRPM_Click
	run=True
	Manager.SendMessage("010C" & Chr(13) & Chr(10))
End Sub

Sub btnTest_Click
	run=False
	Manager.SendMessage("ATZ" & Chr(13) & Chr(10))
End Sub

Public Sub NewMessage (msg As String)
	reply = reply & msg
	If reply.Contains(">") Then
		If run Then
			rpm
			Manager.SendMessage("010C" & Chr(13) & Chr(10))
		Else
			Label2.Text = reply
			reply = ""
		End If
	End If

End Sub

Sub rpm
	Dim a, b As Int
	Dim angle As Float
	Dim rpmD As String
	Dim aa(), bb() As Byte
	
	aa=bc.HexToBytes(reply.SubString2(13,15))
	bb=bc.HexToBytes(reply.SubString2(16,18))
	a=Bit.And(0xFF,aa(0))		'convert byte to unsigned byte
	b=Bit.And(0xFF,bb(0))

	angle = ((a * 256 + b) / 100) - 120
	rpmD = (a * 256 + b) / 4
	Label1.Text=reply
	reply = ""
	
	cvsGraph.DrawRect(rect1, Colors.Transparent, True, 3dip)		'refresh screen
	cvsGraph.DrawBitmapRotated(bmppointer, Null, rect1, angle)
	cvsGraph.DrawText(rpmD,150,245,Typeface.DEFAULT,36,Colors.Green,"CENTER")
	pnl1.Invalidate
	
End Sub


Sub btnSearchForDevices_Click
	rp.CheckAndRequest(rp.PERMISSION_ACCESS_COARSE_LOCATION)
	Wait For Activity_PermissionResult (Permission As String, Result As Boolean)
	If Result = False Then
		ToastMessageShow("No permission...", False)
		Return
	End If
	Dim success As Boolean = Manager.SearchForDevices
	If success = False Then
		ToastMessageShow("Error starting discovery process.", True)
	Else
		ProgressDialogShow2("Searching for devices...", False)
	End If
End Sub

Public Sub DiscoverFinished
	ProgressDialogHide
	If Manager.foundDevices.Size = 0 Then
		ToastMessageShow("No device found.", True)
	Else
		Dim l As List
		l.Initialize
		For Each nm As NameAndMac In Manager.foundDevices
			l.Add(nm.Name)
		Next
		InputListAsync(l, "Choose device to connect", -1, True)
		Wait For InputList_Result (Index As Int)
		If Index <> DialogResponse.CANCEL Then
			Dim device As NameAndMac = Manager.foundDevices.Get(Index)
			Manager.ConnectTo(device)
			ProgressDialogShow2($"Trying to connect to: ${device.Name} (${device.Mac})"$, False)
		End If
	End If
End Sub

Public Sub AfterConnect (Success As Boolean)
	ProgressDialogHide
End Sub


Sub btnAllowConnection_Click
	Manager.ListenForConnections
End Sub

Sub Activity_Pause (UserClosed As Boolean)
	
End Sub

